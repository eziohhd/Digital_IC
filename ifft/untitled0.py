# -*- coding: utf-8 -*-
"""
Created on Tue Apr  2 23:10:03 2024

@author: ezioh
"""
import numpy as np
import math
import matplotlib.pyplot as plt

    
def binary_to_decimal(binary):
    # 检查最高位是否为1，确定正负号
    sign = -1 if binary[0] == '1' else 1
    
    # 如果是负数，取反加1得到原码
    if sign == -1:
        binary = ''.join('1' if bit == '0' else '0' for bit in binary)
        binary = bin(int(binary, 2) + 1)[2:]
    
    # 计算二进制数的值
    decimal = 0
    for i in range(len(binary)):
        decimal += int(binary[-(i+1)]) * (2**i)
    
    return sign * decimal
    
# 示例使用
# trans
bin_str_in_0_re
bin_str_in_1_re
bin_str_in_0_im
bin_str_in_1_im

in_0_re = []
in_1_re = []

for i in range(0,32): #reverse
    bin_temp = bin_str_in_0_re[16*i:16*i+16]
    in_0_re.append(bin_temp)

in_0_re_signed = []
for i in range(0,32):
    in_0_re_signed.append(binary_to_decimal(in_0_re[i]))

for i in range(0,32):
    bin_temp = bin_str_in_1_re[16*i:16*i+16]
    in_1_re.append(bin_temp)

in_1_re_signed = []
for i in range(0,32):
    in_1_re_signed.append(binary_to_decimal(in_1_re[i]))

#add
in_0_re_signed = np.array(in_0_re_signed)
in_0_re_signed = in_0_re_signed[::-1]
in_1_re_signed = np.array(in_1_re_signed)
in_1_re_signed = in_1_re_signed[::-1]
in_0_1_re_signed_sum = in_0_re_signed + in_1_re_signed

layer_2 = []
for i in range(0,16):
    layer_2.append(in_0_1_re_signed_sum[i] + in_0_1_re_signed_sum[i+16]) 
layer_2=np.array(layer_2)

layer_3 = []
for i in range(0,8):
    layer_3.append(layer_2[i] + layer_2[i+8]) 
layer_3=np.array(layer_3)

layer_4 = []
for i in range(0,4):
    layer_4.append(layer_3[i] + layer_3[i+4]) 
layer_4=np.array(layer_4)

w_0 = -254
w_16 = 25
layer_5_0 = layer_4[0] + layer_4[2]
layer_5_1 = layer_4[1] + layer_4[3]
layer_5_2 = (layer_4[0]-layer_4[2])*w_0/256
layer_5_3 = (layer_4[1]-layer_4[3])*w_16/256

layer6_0 = layer_5_0 + layer_5_1
layer6_1 = layer_5_0 - layer_5_1
layer6_2 = layer_5_2 + layer_5_3
layer6_3 = layer_5_2 - layer_5_3
result_exp = binary_to_decimal('1110110111000001')
result_actual = binary_to_decimal('1110010100111001')
zero_re_exp = binary_to_decimal('1111000101010011')
zero_im_exp = binary_to_decimal('1110110111100100')
one_re_exp = binary_to_decimal('1110000010111111')
one_im_exp = binary_to_decimal('1101110011000100')

zero_re_actual = binary_to_decimal('1111000101010011')
zero_im_actual = binary_to_decimal('1110110111100100')
one_re_actual = binary_to_decimal('0001111101000001')
one_im_actual = binary_to_decimal('0010001100111100')

a = [8,9,10]
b= [98312,97088,96028]
plt.plot(a, b)
plt.xlabel('cycle period(ns)')
plt.ylabel('area(um2)')
plt.show()
